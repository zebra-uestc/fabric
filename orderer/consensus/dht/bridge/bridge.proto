syntax = "proto3";
// 部分struct{}数据结构待完善!!!

// node0(Server) <-> orderer(Client)
service Bridge{
    // 由发送方调用函数，接收方实现函数
    rpc TransMsg(Msg) returns (Status){};
    rpc TransBlock(Block) returns (Status){};
    // dht调用，orderer实现
    rpc LoadConfig(Status) returns (Config){};
}

message Status{

}

message Config{

    
}

message Envelope{
 // A marshaled Payload
 bytes payload = 1;

 // A signature by the creator specified in the Payload header
 bytes signature = 2;
}

message Msg{
    uint64 configSeq=1;
	Envelope normalMsg=2;
	Envelope configMsg=3;
}

message BlockHeader{
    uint64 number = 1; // The position in the blockchain
    bytes previous_hash = 2; // The hash of the previous block header
    bytes data_hash = 3; // The hash of the BlockData, by MerkleTree
}

message BlockData{
    repeated bytes data = 1;
}

message BlockMetadata{
    repeated bytes metadata = 1;
}

message Block{
    BlockHeader header = 1;
    BlockData data = 2;
    BlockMetadata metadata = 3;
}

